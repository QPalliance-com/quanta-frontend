name: Deploy Angular Frontend to ECS

on:
  push:
    branches:
      - dev
      - qa
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Define environment based on branch
      id: env
      run: |
        if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
          echo "env_name=dev" >> $GITHUB_OUTPUT
          echo "image_tag=dev" >> $GITHUB_OUTPUT
          echo "cluster_name=quanta-dev" >> $GITHUB_OUTPUT
          echo "service_name=frontend-dev" >> $GITHUB_OUTPUT
        elif [[ "${GITHUB_REF##*/}" == "qa" ]]; then
          echo "env_name=qa" >> $GITHUB_OUTPUT
          echo "image_tag=qa" >> $GITHUB_OUTPUT
          echo "cluster_name=quanta-qa" >> $GITHUB_OUTPUT
          echo "service_name=frontend-qa" >> $GITHUB_OUTPUT
        else
          echo "env_name=prod" >> $GITHUB_OUTPUT
          echo "image_tag=latest" >> $GITHUB_OUTPUT
          echo "cluster_name=quanta-prod" >> $GITHUB_OUTPUT
          echo "service_name=frontend-prod" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/quanta-frontend:${{ steps.env.outputs.image_tag }}
        docker build -t $IMAGE_URI -f docker/Dockerfile .
        docker push $IMAGE_URI

    - name: Generate updated task definition
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/quanta-frontend:${{ steps.env.outputs.image_tag }}
        sed "s|REPLACEME|$IMAGE_URI|g" docker/ecs-task-def.json > new-task-def.json

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: new-task-def.json
        cluster: ${{ steps.env.outputs.cluster_name }}
        service: ${{ steps.env.outputs.service_name }}
        wait-for-service-stability: true